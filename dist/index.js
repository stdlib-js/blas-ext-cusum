"use strict";var v=function(r,u){return function(){return u||r((u={exports:{}}).exports,u),u.exports}};var d=v(function(or,p){
var R=require('@stdlib/ndarray-base-to-unique-normalized-indices/dist'),j=require('@stdlib/array-base-indices-complement/dist'),F=require('@stdlib/array-base-take-indexed/dist');function G(r,u){var a=R(u,r.length-1);return a===null?[]:F(r,j(r.length,a))}p.exports=G
});var l=v(function(mr,y){
var c=require('@stdlib/ndarray-dtypes/dist'),H=require('@stdlib/blas-ext-base-ndarray-gcusum/dist'),J=require('@stdlib/blas-ext-base-ndarray-dcusum/dist'),K=require('@stdlib/blas-ext-base-ndarray-scusum/dist'),M=require('@stdlib/ndarray-base-unary-strided1d-dispatch-factory/dist'),Q=c("numeric_and_generic"),U=c("numeric_and_generic"),W=c("numeric_and_generic"),X={output:"accumulation",casting:"none"},Y={types:["float64","float64","float32","float32"],fcns:[J,K],default:H},Z={strictTraversalOrder:!0},$=M(Y,[Q,U],W,X,Z);y.exports=$
});var k=v(function(dr,_){
var h=require('@stdlib/assert-has-own-property/dist'),b=require('@stdlib/assert-is-number/dist').isPrimitive,S=require('@stdlib/assert-is-complex-like/dist'),w=require('@stdlib/assert-is-ndarray-like/dist'),g=require('@stdlib/ndarray-base-broadcast-scalar/dist'),x=require('@stdlib/ndarray-base-maybe-broadcast-array/dist'),rr=require('@stdlib/ndarray-dtype/dist'),C=require('@stdlib/ndarray-shape/dist'),O=require('@stdlib/ndarray-order/dist'),er=require('@stdlib/error-tools-fmtprodmsg/dist'),T=d(),o=l();function ar(r){var u,a,n,t,s,e;if(u=arguments.length,t=rr(r),n=O(r),u<2)return o(r,g(0,t,[],n));if(e=arguments[1],u===2){if(w(e))return o(r,e);if(b(e)||S(e))return o(r,g(e,t,[],n));a=e,e=0}else a=arguments[2];if(w(e))h(a,"dims")&&(e=x(e,T(C(r),a.dims)));else if(b(e)||S(e))h(a,"dims")?s=T(C(r),a.dims):s=[],e=g(e,t,s,O(r));else throw new TypeError(er("invalid argument. Second argument must be either an ndarray or a numeric scalar value. Value: `%s`.",e));return o(r,e,a)}_.exports=ar
});var N=v(function(cr,I){
var L=require('@stdlib/assert-has-own-property/dist'),P=require('@stdlib/assert-is-number/dist').isPrimitive,E=require('@stdlib/assert-is-complex-like/dist'),q=require('@stdlib/assert-is-ndarray-like/dist'),f=require('@stdlib/ndarray-base-broadcast-scalar/dist'),ir=require('@stdlib/ndarray-base-maybe-broadcast-array/dist'),ur=require('@stdlib/ndarray-dtype/dist'),V=require('@stdlib/ndarray-shape/dist'),A=require('@stdlib/ndarray-order/dist'),B=require('@stdlib/error-tools-fmtprodmsg/dist'),D=d(),m=l().assign;function tr(r){var u,a,n,t,s,e,i;if(u=arguments.length,s=ur(r),n=A(r),u<3)return m(r,f(0,s,[],n),arguments[1]);if(i=arguments[1],t=arguments[2],u===3){if(q(t)){if(q(i))return m(r,i,t);if(!P(i)&&!E(i))throw new TypeError(B("invalid argument. Second argument must be either an ndarray or a numeric scalar value. Value: `%s`.",i));return m(r,f(i,s,[],n),t)}a=t,t=i,i=0}else a=arguments[3];if(q(i))L(a,"dims")&&(i=ir(i,D(V(r),a.dims)));else if(P(i)||E(i))L(a,"dims")?e=D(V(r),a.dims):e=[],i=f(i,s,e,A(r));else throw new TypeError(B("invalid argument. Second argument must be either an ndarray or a numeric scalar value. Value: `%s`.",i));return m(r,i,t,a)}I.exports=tr
});var sr=require('@stdlib/utils-define-nonenumerable-read-only-property/dist'),z=k(),nr=N();sr(z,"assign",nr);module.exports=z;
/** @license Apache-2.0 */
//# sourceMappingURL=index.js.map
